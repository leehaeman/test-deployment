kube-prometheus-stack:
  fullnameOverride: ffm-dev-prometheus

  additionalPrometheusRulesMap:
    rule-name:
      groups:
        - name: ffm-dev
          rules:
            - alert: '5xx error on incoming requests'
              expr: |
                sum(
                  rate(
                    nginx_ingress_controller_requests{status=~"5\\d\\d"}[1m]
                  ) * 60
                ) > 1
              for: 5m
              labels:
                severity: 'critical'
              annotations:
                summary: '5xx error occurred on incoming requests'
                description: 'Rate of 5xx error on incoming requests is {{ printf "%.0f" $value }}'
                # TODO : modify datadog url
                logs: 'https://www.datadoghq.com/'
                severity: 'critical'

  alertmanager:
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/hostname: alertmanager.fulfillment.dev.yogiyo.co.kr
      hosts:
        - alertmanager.fulfillment.dev.yogiyo.co.kr
      paths:
        - /
    config:
      global:
        resolve_timeout: 1m
        slack_api_url: "set by secrets.yaml"
      route:
        group_by:
          - alertname
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: ffm-dev
        routes:
          - match:
              severity: critical
            group_by:
              - alertname
              - severity
            receiver: ffm-dev
      receivers:
        - name: ffm-dev
          slack_configs:
            - send_resolved: true
              channel: "#rnd_tribe_ffm_alert_dev"
              username: "Alertmanager"
              icon_url: "https://cncf-branding.netlify.app/img/projects/prometheus/icon/black/prometheus-icon-black.png"
              text: |-
                {{ range .Alerts }}
                {{ .Annotations.description }}
                {{ end }}
              footer: "Severity: {{ .GroupLabels.severity }}"
              actions:
                - type: button
                  text: Query
                  url: '{{- range $i, $alert := .Alerts -}}{{- if lt $i 1 -}}{{- index $alert.Annotations "query" -}}{{- end -}}{{- end -}}'
                - type: button
                  text: Dashboard
                  url: '{{- range $i, $alert := .Alerts -}}{{- if lt $i 1 -}}{{- index $alert.Annotations "grafana" -}}{{- end -}}{{- end -}}'
                - type: button
                  text: Logs
                  url: '{{- range $i, $alert := .Alerts -}}{{- if lt $i 1 -}}{{- index $alert.Annotations "logs" -}}{{- end -}}{{- end -}}'
                - type: button
                  text: Runbook
                  url: "{{ range .Alerts }}{{ .Annotations.runbook }}{{ end }}"
    alertmanagerSpec:
      retention: 120h
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: gp3
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 10Gi

  prometheus:
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        external-dns.alpha.kubernetes.io/hostname: prometheus.fulfillment.dev.yogiyo.co.kr
      hosts:
        - prometheus.fulfillment.dev.yogiyo.co.kr
      paths:
        - /
    prometheusSpec:
      retention: 30d
      retentionSize: "100GB"
      resources:
        limits:
          cpu: 1000m
          memory: 1024Mi
        requests:
          cpu: 100m
          memory: 128Mi
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: gp3
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 100Gi
      additionalScrapeConfigs:
        # Blackbox Exporter
        # Ref. https://www.infracloud.io/blogs/monitoring-endpoints-kubernetes-blackbox-exporter/
        - job_name: "blackbox-kubernetes-services"
          metrics_path: /probe
          params:
            module: [http_2xx]
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - target_label: __address__
              replacement:  prometheus-blackbox-exporter:9115
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: kubernetes_service_name
        - job_name: "blackbox-kubernetes-ingresses"
          metrics_path: /probe
          params:
            module: [ http_2xx ]
          kubernetes_sd_configs:
            - role: ingress
          relabel_configs:
            - source_labels:
                [
                  __meta_kubernetes_ingress_scheme,
                  __address__,
                  __meta_kubernetes_ingress_path,
                ]
              regex: (.+);(.+);(.+)
              replacement: ${1}://${2}${3}
              target_label: __param_target
            - target_label: __address__
              replacement: prometheus-blackbox-exporter:9115
            - source_labels: [ __param_target ]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_ingress_label_(.+)
            - source_labels: [ __meta_kubernetes_namespace ]
              target_label: kubernetes_namespace
            - source_labels: [ __meta_kubernetes_ingress_name ]
              target_label: ingress_name

grafana:
  adminPassword: "set by secrets.yaml"
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      external-dns.alpha.kubernetes.io/hostname: grafana.fulfillment.dev.yogiyo.co.kr
    hosts:
      - grafana.fulfillment.dev.yogiyo.co.kr
    paths:
      - /
